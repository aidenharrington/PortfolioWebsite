{
    "title": "Subscribr",
    "github": "GitHub Repository",
    "introParagraph": "Subscribr is a full-stack mock subscription management application that allows users to subscribe to each other and receive real-time notifications about their video upload status or video uploads from their subscriptions. The project is built and ran within a docker containing four components: a React frontend, a PostgreSQL database, and two Java Spring Boot APIs, one for managing API calls from the frontend and the other being responsible for the video upload process and the corresponding event-driven notifications.",
    "bodyParagraph1": "My intention behind building Subscribr was to continue to improve my fullstack development skills, specifically focusing on event-driven communication using webhooks and emitters as well as using Docker to manage the setup and launching of an application. These two learning objectives shaped the direction and functionality of the application.",
    "bodyParagraph2": "The main purpose for event-driven communication in Subscribr is to alert video uploaders when their video is finished uploading and to alert their subscribers that they have uploaded a new video. To handle real-time alerting across multiple browser instances, Subscribr uses a combination of emitters and webhooks. When a user logs in to their Subscribr account, they are then subscribed to all events regarding the user pushed by the backend using emitter notifications. When a user uploads a video, they connect to Subscribr’s main API, which, along with adding the necessary info to the database, adds the video to the mock upload queue by sending its own HTTP call to the video upload API component. Once the video upload request is received by this component, a mock upload process is started. The completion of the upload triggers the event-driven communication, which is started by sending a webhook to the main Subscribr API. Subscribr’s main API then parses the webhook and decides which users to send the notifications to and emits the events from the emitter manager. The subscribed browser instances on the frontend receive the notifications they are subscribed to and display the notification in a Snackbar popup, containing either the message that their video has finished uploading or one of their subscriptions has released a new video.",
    "bodyParagraph3": "My goal behind using Docker to run and manage my applications was to trivialize the setup for new users. Once Subscribr is installed on a computer, it can be run with one single line. This run command handles everything to do with the database setup (including the creation of the required tables for the first run) and the application setup (installing necessary dependencies, booting the applications in the correct order, and handling their connections with each other and the database). Subscribr can also be run outside of docker by manually starting each application. To be able to run both inside and outside of Docker, Subscribr is built with two environment configurations and the correct one is automatically selected at launch based on how the application was started.",
    "conclusionParagraph": "While building Subscribr, I not only learned a lot about my learning objectives (event-driven communication and full application dockerization), but I learned a surprising amount about concepts I previously thought myself familiar with. The development process was a great learning experience and I am very happy to have accomplished my original requirements with Subscribr. If you have more questions about Subscribr, want to see the project in action with a live demo, or want to hear more about my learning experience, then I would recommend you check out my Subscribr explanation video below!"
}