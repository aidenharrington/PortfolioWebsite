{
    "title": "Subscribr",
    "github": "GitHub Repository",
    "introParagraph": "Subscribr is a fullstack mock subscription management application that allows users to subscribe to each other and receive real-time notifications about their video upload status or uploads from their subscriptions. The project is built and run within a Docker container containing four components: a React frontend, a PostgreSQL database, and two Java Spring Boot APIs—one for managing API calls from the frontend and the other responsible for the video upload process and the corresponding event-driven notifications.",
    "bodyParagraph1": "My intention behind building Subscribr was to continue improving my fullstack development skills, specifically focusing on event-driven communication using webhooks and emitters as well as using Docker to manage the setup and launching of an application. These two learning objectives shaped the direction and functionality of the application.",
    "bodyParagraph2": "The main purpose of event-driven communication in Subscribr is to alert video uploaders when their video is finished uploading and notify their subscribers that a new video has been uploaded. To handle real-time alerting across multiple browser instances, Subscribr uses a combination of emitters and webhooks. When a user logs into their Subscribr account, they are subscribed to all relevant events pushed by the backend using emitter notifications. When a user uploads a video, they connect to Subscribr’s main API which adds the necessary information to the database and sends an HTTP call to the video upload API component to place the video in the mock upload queue. Once the upload API component receives the request, a mock upload process begins. When the upload completes, it triggers the event-driven communication by sending a webhook to the main Subscribr API. The main API parses the webhook, determines which users should receive notifications, and emits events from the emitter manager. The subscribed browser instances on the frontend receive the events and display the notifications in a Snackbar popup, showing either a message that their video has finished uploading or that a user they are subscribed to has uploaded a new video.",
    "bodyParagraph3": "My goal in using Docker to run and manage my applications was to simplify the setup process for new users. Once Subscribr is installed, it can be run with a single command. This command handles the entire setup: creating required database tables (if it’s the first run), installing dependencies, booting all applications in the correct order, and managing connections between the components. Subscribr can also be run outside of Docker by manually starting each application. To support both modes, Subscribr is built with two environment configurations, and the appropriate one is automatically selected at launch based on the method used to start the application.",
    "conclusionParagraph": "While building Subscribr, I not only learned a great deal about my learning objectives—event-driven communication and full application dockerization—but also deepened my understanding of concepts I had previously thought I was already familiar with. The development process was a rewarding experience, and I’m proud to have accomplished the original goals I set for the project.",
    "conclusionParagraph2": "If you have more questions about Subscribr, want to see the project in action with a live demo, or are curious about what I learned along the way, feel free to check out my Subscribr explanation video at the top of this page."
}